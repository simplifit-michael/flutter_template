// Mocks generated by Mockito 5.4.0 from annotations
// in flutter_template/test/golden/common/setup_test_locator.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i9;

import 'package:dartz/dartz.dart' as _i4;
import 'package:flutter_bloc/flutter_bloc.dart' as _i14;
import 'package:flutter_template/src/core/errors/failures/failure.dart' as _i12;
import 'package:flutter_template/src/data/auth/data_source/local_auth_data_source.dart'
    as _i8;
import 'package:flutter_template/src/data/auth/data_source/remote_auth_data_source.dart'
    as _i10;
import 'package:flutter_template/src/data/auth/model/auth_user_model.dart'
    as _i2;
import 'package:flutter_template/src/data/users/export.dart' as _i3;
import 'package:flutter_template/src/domain/app_state/cubit/app_state_bloc.dart'
    as _i5;
import 'package:flutter_template/src/domain/auth/bloc/auth_bloc.dart' as _i6;
import 'package:flutter_template/src/domain/auth/entity/auth_user.dart' as _i13;
import 'package:flutter_template/src/domain/auth/repository/auth_repository.dart'
    as _i11;
import 'package:flutter_template/src/domain/users/export.dart' as _i7;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthUserModel_0 extends _i1.SmartFake implements _i2.AuthUserModel {
  _FakeAuthUserModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUserModel_1 extends _i1.SmartFake implements _i3.UserModel {
  _FakeUserModel_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAppStateState_3 extends _i1.SmartFake implements _i5.AppStateState {
  _FakeAppStateState_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAuthState_4 extends _i1.SmartFake implements _i6.AuthState {
  _FakeAuthState_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeUsersState_5 extends _i1.SmartFake implements _i7.UsersState {
  _FakeUsersState_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LocalAuthUserDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalAuthUserDataSource extends _i1.Mock
    implements _i8.LocalAuthUserDataSource {
  MockLocalAuthUserDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<void> setCurrentUser(_i2.AuthUserModel? model) =>
      (super.noSuchMethod(
        Invocation.method(
          #setCurrentUser,
          [model],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [RemoteAuthUserDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteAuthUserDataSource extends _i1.Mock
    implements _i10.RemoteAuthUserDataSource {
  MockRemoteAuthUserDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i2.AuthUserModel> signIn(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            email,
            password,
          ],
        ),
        returnValue: _i9.Future<_i2.AuthUserModel>.value(_FakeAuthUserModel_0(
          this,
          Invocation.method(
            #signIn,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i9.Future<_i2.AuthUserModel>);
  @override
  _i9.Future<void> signOut() => (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [LocalUsersDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocalUsersDataSource extends _i1.Mock
    implements _i3.LocalUsersDataSource {
  MockLocalUsersDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i3.UserModel> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: <_i3.UserModel>[],
      ) as List<_i3.UserModel>);
  @override
  _i9.Future<void> setUsers(List<_i3.UserModel>? users) => (super.noSuchMethod(
        Invocation.method(
          #setUsers,
          [users],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i3.UserModel? getUser(String? id) => (super.noSuchMethod(Invocation.method(
        #getUser,
        [id],
      )) as _i3.UserModel?);
  @override
  _i9.Future<void> addUser(_i3.UserModel? user) => (super.noSuchMethod(
        Invocation.method(
          #addUser,
          [user],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  _i9.Future<void> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
}

/// A class which mocks [RemoteUsersDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoteUsersDataSource extends _i1.Mock
    implements _i3.RemoteUsersDataSource {
  MockRemoteUsersDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<List<_i3.UserModel>> getUsers() => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
        ),
        returnValue: _i9.Future<List<_i3.UserModel>>.value(<_i3.UserModel>[]),
      ) as _i9.Future<List<_i3.UserModel>>);
  @override
  _i9.Future<_i3.UserModel> getUser(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [id],
        ),
        returnValue: _i9.Future<_i3.UserModel>.value(_FakeUserModel_1(
          this,
          Invocation.method(
            #getUser,
            [id],
          ),
        )),
      ) as _i9.Future<_i3.UserModel>);
}

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i11.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i4.Either<_i12.FailureType, _i13.AuthUser?>> getCurrentUser() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentUser,
          [],
        ),
        returnValue:
            _i9.Future<_i4.Either<_i12.FailureType, _i13.AuthUser?>>.value(
                _FakeEither_2<_i12.FailureType, _i13.AuthUser?>(
          this,
          Invocation.method(
            #getCurrentUser,
            [],
          ),
        )),
      ) as _i9.Future<_i4.Either<_i12.FailureType, _i13.AuthUser?>>);
  @override
  _i9.Future<_i4.Either<_i12.FailureType, _i13.AuthUser>> signIn(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #signIn,
          [
            email,
            password,
          ],
        ),
        returnValue:
            _i9.Future<_i4.Either<_i12.FailureType, _i13.AuthUser>>.value(
                _FakeEither_2<_i12.FailureType, _i13.AuthUser>(
          this,
          Invocation.method(
            #signIn,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i9.Future<_i4.Either<_i12.FailureType, _i13.AuthUser>>);
  @override
  _i9.Future<_i4.Either<_i12.FailureType, void>> signOut() =>
      (super.noSuchMethod(
        Invocation.method(
          #signOut,
          [],
        ),
        returnValue: _i9.Future<_i4.Either<_i12.FailureType, void>>.value(
            _FakeEither_2<_i12.FailureType, void>(
          this,
          Invocation.method(
            #signOut,
            [],
          ),
        )),
      ) as _i9.Future<_i4.Either<_i12.FailureType, void>>);
}

/// A class which mocks [UsersRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersRepository extends _i1.Mock implements _i7.UsersRepository {
  MockUsersRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Future<_i4.Either<_i12.FailureType, List<_i7.User>>> getUsers(
          {bool? force = false}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [],
          {#force: force},
        ),
        returnValue:
            _i9.Future<_i4.Either<_i12.FailureType, List<_i7.User>>>.value(
                _FakeEither_2<_i12.FailureType, List<_i7.User>>(
          this,
          Invocation.method(
            #getUsers,
            [],
            {#force: force},
          ),
        )),
      ) as _i9.Future<_i4.Either<_i12.FailureType, List<_i7.User>>>);
  @override
  _i9.Future<_i4.Either<_i12.FailureType, _i7.User>> getUser(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [id],
        ),
        returnValue: _i9.Future<_i4.Either<_i12.FailureType, _i7.User>>.value(
            _FakeEither_2<_i12.FailureType, _i7.User>(
          this,
          Invocation.method(
            #getUser,
            [id],
          ),
        )),
      ) as _i9.Future<_i4.Either<_i12.FailureType, _i7.User>>);
  @override
  _i9.Future<_i4.Either<_i12.FailureType, void>> clear() => (super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValue: _i9.Future<_i4.Either<_i12.FailureType, void>>.value(
            _FakeEither_2<_i12.FailureType, void>(
          this,
          Invocation.method(
            #clear,
            [],
          ),
        )),
      ) as _i9.Future<_i4.Either<_i12.FailureType, void>>);
}

/// A class which mocks [AppStateCubit].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppStateCubit extends _i1.Mock implements _i5.AppStateCubit {
  MockAppStateCubit() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.AppStateState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAppStateState_3(
          this,
          Invocation.getter(#state),
        ),
      ) as _i5.AppStateState);
  @override
  _i9.Stream<_i5.AppStateState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i5.AppStateState>.empty(),
      ) as _i9.Stream<_i5.AppStateState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i5.AppStateEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i5.AppStateEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i5.AppStateState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i5.AppStateEvent>(
    _i14.EventHandler<E, _i5.AppStateState>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i14.Transition<_i5.AppStateEvent, _i5.AppStateState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  void onChange(_i14.Change<_i5.AppStateState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [AuthBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthBloc extends _i1.Mock implements _i6.AuthBloc {
  MockAuthBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.AuthState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeAuthState_4(
          this,
          Invocation.getter(#state),
        ),
      ) as _i6.AuthState);
  @override
  _i9.Stream<_i6.AuthState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i6.AuthState>.empty(),
      ) as _i9.Stream<_i6.AuthState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i6.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i6.AuthEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i6.AuthState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i6.AuthEvent>(
    _i14.EventHandler<E, _i6.AuthState>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i14.Transition<_i6.AuthEvent, _i6.AuthState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  void onChange(_i14.Change<_i6.AuthState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [UsersBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockUsersBloc extends _i1.Mock implements _i7.UsersBloc {
  MockUsersBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.UsersState get state => (super.noSuchMethod(
        Invocation.getter(#state),
        returnValue: _FakeUsersState_5(
          this,
          Invocation.getter(#state),
        ),
      ) as _i7.UsersState);
  @override
  _i9.Stream<_i7.UsersState> get stream => (super.noSuchMethod(
        Invocation.getter(#stream),
        returnValue: _i9.Stream<_i7.UsersState>.empty(),
      ) as _i9.Stream<_i7.UsersState>);
  @override
  bool get isClosed => (super.noSuchMethod(
        Invocation.getter(#isClosed),
        returnValue: false,
      ) as bool);
  @override
  void add(_i7.UsersEvent? event) => super.noSuchMethod(
        Invocation.method(
          #add,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onEvent(_i7.UsersEvent? event) => super.noSuchMethod(
        Invocation.method(
          #onEvent,
          [event],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void emit(_i7.UsersState? state) => super.noSuchMethod(
        Invocation.method(
          #emit,
          [state],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void on<E extends _i7.UsersEvent>(
    _i14.EventHandler<E, _i7.UsersState>? handler, {
    _i14.EventTransformer<E>? transformer,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #on,
          [handler],
          {#transformer: transformer},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onTransition(
          _i14.Transition<_i7.UsersEvent, _i7.UsersState>? transition) =>
      super.noSuchMethod(
        Invocation.method(
          #onTransition,
          [transition],
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i9.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i9.Future<void>.value(),
        returnValueForMissingStub: _i9.Future<void>.value(),
      ) as _i9.Future<void>);
  @override
  void onChange(_i14.Change<_i7.UsersState>? change) => super.noSuchMethod(
        Invocation.method(
          #onChange,
          [change],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
  @override
  void onError(
    Object? error,
    StackTrace? stackTrace,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );
}
